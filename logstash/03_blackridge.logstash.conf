input {
  # Listen on UDP/514 for syslog messages.
  udp {
    type => "syslog"
    port => "${ESLOG_SYSLOG_PORT:514}"
  }
    
  # Listen on TCP/514 for syslog messages.
  tcp {
    type => "syslog"
    port => "${ESLOG_SYSLOG_PORT:514}"
  }

  file {
    path => "${ESLOG_BASE}/logs/dev.syslog"
    sincedb_clean_after => "5 seconds"
    start_position => "beginning"
  }
}

filter {
  # Syslog messages can come in various basic formats. Here we check for common patterns and extract the basic fields as well as the logged message.
  grok {
    match => {
      "message" => "(?:<%{INT:syslog_pri}>\s*)?(?:%{SYSLOGTIMESTAMP:[@metadata][syslog_timestamp]}|%{TIMESTAMP_ISO8601:[@metadata][syslog_timestamp]})\s+(?:%{SYSLOGFACILITY}\s+)?%{IPORHOST:logging_host}\s+%{PROG:logging_process}(?:\[%{INT:logging_pid}\])?:\s+%{GREEDYDATA:logged_message}"
    }
  }
  if "_grokparsefailure" in [tags] {
    # Drop message if it didn't match any expected syslog message format.
    drop { }
  } else {
    syslog_pri { }
  }
}

output {
  stdout {
    codec => rubydebug {
      metadata => true
    }
  }
}
